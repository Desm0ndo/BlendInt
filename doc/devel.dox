/**

@page page_development Development
@tableofcontents

@section sect_eclipse Develop in Eclipse CDT

@subsection sect_eclipse_create Create Eclipse Project Files

CMake (from 2.6) includes a generator for Eclipse CDT 4.0 or newer
(see http://www.cmake.org/Wiki/Eclipse_CDT4_Generator).

Follow these steps to generate eclipse project files for importing
into Eclipse:

assume checkout BlendInt source code to ~/BlendInt

	$ cd ~	# change current directory to HOME
	$ mkdir build # make a new directory to generate cmake build files
	$ cd build
	$ cmake ../BlendInt -DCMAKE_BUILD_TYPE=Debug	# Add Debug definition if needed
	$ cmake -G"Eclipse CDT4 - Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug ../BlendInt

@subsection sect_eclipse_import Import Project

- Open Eclipse
- "File" -> "Import" -> "General" -> "Existing Projects into Workspace"
- Select directory "~/build" in the import dialog
- "Finish"

@section sect_unit_test Unit Test

It's encouraged that each module should be tested and every line
shoule be covered in the unit test.

BlendInt uses Google Test (1.7) to develop unit test. The folder in
"test/gtest" is a complete copy of Google Test 1.7.

@subsection sect_unit_test_build Build the Unit Test code

To build the existing unit test code, run CMake with option
-DWITH_UNIT_TEST

	$ cmake <BlendInt source dir> -DWITH_UNIT_TEST=TRUE
	
In mose cases, it's also needed to enable DEBUG macro as some test
code need it.

	$ cmake <BlendInt source dir> -DCMAKE_BUILD_TYPE=Debug -DWITH_UNIT_TEST

@subsection sect_unit_test_run Run a unit test

A unit test is built into "bin/" in the build directory after building
with cmake/make.

To run a unit test,  for example,  to run unit test for Widget,  run

	$ ./bin/testWidget
	
As BlendInt is a GUI toolkit, in most unit test, it's needed to
observe the behavior in the OpenGL Context window instead of simply
check the return value.
	
@subsection sect_unit_test_write Write an unit test

To write a new unit test,  follow these steps:

- create a new folder in "test/unit"
- create source for main()
- create test fixture
- edit CMakeLists.txt in the new folder
- update CMakeLists.txt in "test/unit"

To simplify these steps, use the script "create_test.sh" in
"test/script", for example:

	$ ~/BlendInt/test/script/create_test.sh Layout

This will create new folder in "test/unit" and copy some templates
files.

@subsection sect_unit_test_example An Example of Unit Test

TBD...

@section sect_debug Debug

@subsection sect_debug_mac Debug in Mac OS X with gdb

@subsubsection Giving gdb permission to control other processes

See: http://sourceware.org/gdb/wiki/BuildingOnDarwin

If you try to use your freshly built gdb, you will get an error
message such as:

	Starting program: /x/y/foo
	Unable to find Mach task port for process-id 28885: (os/kern) failure (0x5).
	 (please check gdb is codesigned - see taskgated(8))

This is because the Darwin kernel will refuse to allow gdb to debug
another process if you don't have special rights, since debugging a
process means having full control over that process, and that isn't
allowed by default since it would be exploitable by malware. (The
kernel won't refuse if you are root, but of course you don't want to
be root to debug.)

The most up to date method to allow gdb to control another process is
to sign it with any system-trusted code signing authority. This is an
easy process once you have a certificate (see the section below). If
the certificate is known as gdb-cert, just use:

    $ codesign -s gdb-cert gdb

Old notes: In Tiger, the kernel would accept processes whose primary
effective group is procmod or procview. That means that making gdb
setgid procmod should work. Later versions of Darwin should accept
this convention provided that taskgated (the daemon that control the
access) is invoked with option '-p'. This daemon is configured by
/System/Library/LaunchDaemons/com.apple.taskgated.plist. I was able to
use this rule provided that I am also a member of the procmod group.

@subsubsection Creating a certificate

Start Keychain Access application (/Applications/Utilities/Keychain
Access.app)

Open menu /Keychain Access/Certificate Assistant/Create a
Certificate...

Choose a name (gdb-cert in the example), set Identity Type to Self
Signed Root, set Certificate Type to Code Signing and select the Let
me override defaults. Click several times on Continue until you get to
the Specify a Location For The Certificate screen, then set Keychain
to System.

If you can't store the certificate in the System keychain, create it
in the login keychain, then exported it. You can then imported it into
the System keychain.

Finally, using the contextual menu for the certificate, select Get
Info, open the Trust item, and set Code Signing to Always Trust.

You must quit Keychain Access application in order to use the
certificate and restart taskgated service by killing the current
running taskgated process (so before using gdb).

@section sect_opengl_reference Some Good OpenGL Tutorial Site

Here's a list of good opengl tutorial site from which you can learn
modern opengl programming. Thanks to the authors!

       - http://www.opengl-tutorial.org/
       - http://nccastaff.bournemouth.ac.uk/jmacey/RobTheBloke/www/opengl_programming.html
       - http://ogldev.atspace.co.uk/
       - http://www.arcsynthesis.org/gltut/index.html
       - http://code.google.com/p/freetype-gl/
       - http://lazyfoo.net/tutorials/OpenGL/index.php
       - http://en.wikibooks.org/wiki/OpenGL_Programming
       - http://www.clockworkcoders.com/oglsl/tutorials.html
       - http://antongerdelan.net/opengl/index.html

*/
